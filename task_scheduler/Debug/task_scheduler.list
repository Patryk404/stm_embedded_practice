
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f60  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080010f4  080010f4  000110f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011c0  080011c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080011c0  080011c0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011c0  080011c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011c0  080011c0  000111c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011c4  080011c4  000111c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080011c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000044  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b90  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003c4  00000000  00000000  00020c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00020ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000160  00000000  00000000  00021190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001d8e  00000000  00000000  000212f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001535  00000000  00000000  0002307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000096cf  00000000  00000000  000245b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002dc82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000bec  00000000  00000000  0002dcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080010dc 	.word	0x080010dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	080010dc 	.word	0x080010dc

080001d4 <enable_all_faults>:

void init_systick_timer(uint32_t tick_hz);
__attribute__((naked)) void init_scheduler_stack(uint32_t start_address);
void init_tasks_stack(void);
__attribute__((naked)) void switch_sp_to_psp(void);
void enable_all_faults(void){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	uint32_t *shcrs = (uint32_t*)0xE000ED24;
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <enable_all_faults+0x20>)
 80001dc:	607b      	str	r3, [r7, #4]
	*shcrs = (1<<18) | (1<<17) | (1<<16); // enabling usgfault busfault and memfault
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80001e4:	601a      	str	r2, [r3, #0]
}
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000ed24 	.word	0xe000ed24

080001f8 <main>:

uint32_t psp_of_tasks[MAX_TASKS] = {STACK_TASK1_START,STACK_TASK2_START,STACK_TASK3_START,STACK_TASK4_START};
uint32_t task_handlers[MAX_TASKS];
uint8_t current_task = 0;

int main(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	enable_all_faults();
 80001fc:	f7ff ffea 	bl	80001d4 <enable_all_faults>
	init_scheduler_stack(STACK_SCHEDULER_START);
 8000200:	480c      	ldr	r0, [pc, #48]	; (8000234 <main+0x3c>)
 8000202:	f000 f921 	bl	8000448 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 8000206:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <main+0x40>)
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <main+0x44>)
 800020a:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 800020c:	4a0c      	ldr	r2, [pc, #48]	; (8000240 <main+0x48>)
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <main+0x44>)
 8000210:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 8000212:	4a0c      	ldr	r2, [pc, #48]	; (8000244 <main+0x4c>)
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <main+0x44>)
 8000216:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 8000218:	4a0b      	ldr	r2, [pc, #44]	; (8000248 <main+0x50>)
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <main+0x44>)
 800021c:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 800021e:	f000 f893 	bl	8000348 <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 8000222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000226:	f000 f8d7 	bl	80003d8 <init_systick_timer>

	switch_sp_to_psp();
 800022a:	f000 f86d 	bl	8000308 <switch_sp_to_psp>

	task1_handler();
 800022e:	f000 f80d 	bl	800024c <task1_handler>

	for(;;);
 8000232:	e7fe      	b.n	8000232 <main+0x3a>
 8000234:	2000f000 	.word	0x2000f000
 8000238:	0800024d 	.word	0x0800024d
 800023c:	20000090 	.word	0x20000090
 8000240:	0800025d 	.word	0x0800025d
 8000244:	0800026d 	.word	0x0800026d
 8000248:	0800027d 	.word	0x0800027d

0800024c <task1_handler>:
}

void task1_handler(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	while(1){
		printf("TASK1 \n");
 8000250:	4801      	ldr	r0, [pc, #4]	; (8000258 <task1_handler+0xc>)
 8000252:	f000 fab3 	bl	80007bc <puts>
 8000256:	e7fb      	b.n	8000250 <task1_handler+0x4>
 8000258:	080010f4 	.word	0x080010f4

0800025c <task2_handler>:
	}
}

void task2_handler(void){
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	while(1){
		printf("TASK2 \n");
 8000260:	4801      	ldr	r0, [pc, #4]	; (8000268 <task2_handler+0xc>)
 8000262:	f000 faab 	bl	80007bc <puts>
 8000266:	e7fb      	b.n	8000260 <task2_handler+0x4>
 8000268:	080010fc 	.word	0x080010fc

0800026c <task3_handler>:
	}
}

void task3_handler(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	while(1){
		printf("TASK3 \n");
 8000270:	4801      	ldr	r0, [pc, #4]	; (8000278 <task3_handler+0xc>)
 8000272:	f000 faa3 	bl	80007bc <puts>
 8000276:	e7fb      	b.n	8000270 <task3_handler+0x4>
 8000278:	08001104 	.word	0x08001104

0800027c <task4_handler>:
	}
}

void task4_handler(void){
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	while(1){
		printf("TASK4 \n");
 8000280:	4801      	ldr	r0, [pc, #4]	; (8000288 <task4_handler+0xc>)
 8000282:	f000 fa9b 	bl	80007bc <puts>
 8000286:	e7fb      	b.n	8000280 <task4_handler+0x4>
 8000288:	0800110c 	.word	0x0800110c

0800028c <get_psp_value>:
	}
}

uint32_t get_psp_value(void){
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <get_psp_value+0x1c>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	461a      	mov	r2, r3
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <get_psp_value+0x20>)
 8000298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800029c:	4618      	mov	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	200000a0 	.word	0x200000a0
 80002ac:	20000000 	.word	0x20000000

080002b0 <update_next_task>:

void update_next_task(void){
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	current_task++;
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <update_next_task+0x28>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	3301      	adds	r3, #1
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <update_next_task+0x28>)
 80002be:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <update_next_task+0x28>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	f003 0303 	and.w	r3, r3, #3
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <update_next_task+0x28>)
 80002cc:	701a      	strb	r2, [r3, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	200000a0 	.word	0x200000a0

080002dc <save_psp_value>:

void save_psp_value(uint32_t current_stack_addr){
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
		psp_of_tasks[current_task] = current_stack_addr;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <save_psp_value+0x24>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	4619      	mov	r1, r3
 80002ea:	4a06      	ldr	r2, [pc, #24]	; (8000304 <save_psp_value+0x28>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	200000a0 	.word	0x200000a0
 8000304:	20000000 	.word	0x20000000

08000308 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	__asm volatile("PUSH {LR}");
 8000308:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 800030a:	f7ff ffbf 	bl	800028c <get_psp_value>
	__asm volatile("MSR PSP,R0");
 800030e:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000312:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("MOV R0,#0x02");
 8000316:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 800031a:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 800031e:	4770      	bx	lr
}
 8000320:	bf00      	nop

08000322 <SysTick_Handler>:




__attribute__((naked)) void SysTick_Handler(void){
	__asm volatile("PUSH {LR}"); // to return from that because when we bl lr is changing
 8000322:	b500      	push	{lr}
	__asm volatile("MRS R0,PSP");
 8000324:	f3ef 8009 	mrs	r0, PSP
	__asm volatile("STMDB R0!,{R4-R11}");
 8000328:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("BL save_psp_value");
 800032c:	f7ff ffd6 	bl	80002dc <save_psp_value>

	__asm volatile("BL update_next_task");
 8000330:	f7ff ffbe 	bl	80002b0 <update_next_task>
	__asm volatile("BL get_psp_value");
 8000334:	f7ff ffaa 	bl	800028c <get_psp_value>
	__asm volatile("LDMIA R0!,{R4-R11}");
 8000338:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP,R0");
 800033c:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000340:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8000344:	4770      	bx	lr

 //write and debug here
}
 8000346:	bf00      	nop

08000348 <init_tasks_stack>:

void init_tasks_stack(void){
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
	uint32_t*pPSP;
	for(int i=0;i<MAX_TASKS; i++){
 800034e:	2300      	movs	r3, #0
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	e032      	b.n	80003ba <init_tasks_stack+0x72>
		pPSP=(uint32_t*)psp_of_tasks[i];
 8000354:	4a1e      	ldr	r2, [pc, #120]	; (80003d0 <init_tasks_stack+0x88>)
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035c:	60fb      	str	r3, [r7, #12]

		pPSP--;
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	3b04      	subs	r3, #4
 8000362:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800036a:	601a      	str	r2, [r3, #0]

		pPSP--;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	3b04      	subs	r3, #4
 8000370:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 8000372:	4a18      	ldr	r2, [pc, #96]	; (80003d4 <init_tasks_stack+0x8c>)
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	601a      	str	r2, [r3, #0]

		pPSP--;
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	3b04      	subs	r3, #4
 8000382:	60fb      	str	r3, [r7, #12]
		*pPSP = LR_EXC_RET;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	f06f 0202 	mvn.w	r2, #2
 800038a:	601a      	str	r2, [r3, #0]

		for(int j=0; j<13; j++){
 800038c:	2300      	movs	r3, #0
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	e008      	b.n	80003a4 <init_tasks_stack+0x5c>
			pPSP--;
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	3b04      	subs	r3, #4
 8000396:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
		for(int j=0; j<13; j++){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3301      	adds	r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	2b0c      	cmp	r3, #12
 80003a8:	ddf3      	ble.n	8000392 <init_tasks_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t)pPSP;
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	4908      	ldr	r1, [pc, #32]	; (80003d0 <init_tasks_stack+0x88>)
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<MAX_TASKS; i++){
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	3301      	adds	r3, #1
 80003b8:	60bb      	str	r3, [r7, #8]
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	2b03      	cmp	r3, #3
 80003be:	ddc9      	ble.n	8000354 <init_tasks_stack+0xc>
	}
}
 80003c0:	bf00      	nop
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	20000000 	.word	0x20000000
 80003d4:	20000090 	.word	0x20000090

080003d8 <init_systick_timer>:
void init_systick_timer(uint32_t tick_hz){
 80003d8:	b480      	push	{r7}
 80003da:	b087      	sub	sp, #28
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <init_systick_timer+0x64>)
 80003e2:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80003e4:	4b16      	ldr	r3, [pc, #88]	; (8000440 <init_systick_timer+0x68>)
 80003e6:	613b      	str	r3, [r7, #16]

	uint32_t count_value = PROCESSOR_CLOCK_FREQUENCY/tick_hz;
 80003e8:	4a16      	ldr	r2, [pc, #88]	; (8000444 <init_systick_timer+0x6c>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80003f0:	60fb      	str	r3, [r7, #12]

	*pSRVR &= ~(0x00FFFFFF);
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	601a      	str	r2, [r3, #0]

	*pSRVR |= count_value;
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	431a      	orrs	r2, r3
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	601a      	str	r2, [r3, #0]

	*pSCSR |= (1<<1);
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f043 0202 	orr.w	r2, r3, #2
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	601a      	str	r2, [r3, #0]

	*pSCSR |= (1<<2);
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f043 0204 	orr.w	r2, r3, #4
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	601a      	str	r2, [r3, #0]

	*pSCSR |= (1<<0);
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f043 0201 	orr.w	r2, r3, #1
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	601a      	str	r2, [r3, #0]

}
 800042e:	bf00      	nop
 8000430:	371c      	adds	r7, #28
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	e000e014 	.word	0xe000e014
 8000440:	e000e010 	.word	0xe000e010
 8000444:	007a1200 	.word	0x007a1200

08000448 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t start_address){
 8000448:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0"::"r"(start_address));
 800044a:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 800044e:	4770      	bx	lr
}
 8000450:	bf00      	nop
	...

08000454 <HardFault_Handler>:

void HardFault_Handler(void){
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	printf("Exception: Hardfault \n");
 8000458:	4802      	ldr	r0, [pc, #8]	; (8000464 <HardFault_Handler+0x10>)
 800045a:	f000 f9af 	bl	80007bc <puts>
//	while(1);1
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	08001114 	.word	0x08001114

08000468 <MemManage_Handler>:

void MemManage_Handler(void){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	printf("Exception: MemManage \n");
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <MemManage_Handler+0x10>)
 800046e:	f000 f9a5 	bl	80007bc <puts>
//	while(1);
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	0800112c 	.word	0x0800112c

0800047c <BusFault_Handler>:

void BusFault_Handler(void){
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	printf("Exception: BusFault \n");
 8000480:	4802      	ldr	r0, [pc, #8]	; (800048c <BusFault_Handler+0x10>)
 8000482:	f000 f99b 	bl	80007bc <puts>
//	while(1);
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	08001144 	.word	0x08001144

08000490 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <ITM_SendChar+0x48>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <ITM_SendChar+0x48>)
 80004a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004a4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <ITM_SendChar+0x4c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a0c      	ldr	r2, [pc, #48]	; (80004dc <ITM_SendChar+0x4c>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004b2:	bf00      	nop
 80004b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d0f8      	beq.n	80004b4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	6013      	str	r3, [r2, #0]
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000edfc 	.word	0xe000edfc
 80004dc:	e0000e00 	.word	0xe0000e00

080004e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	e00a      	b.n	8000508 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004f2:	f3af 8000 	nop.w
 80004f6:	4601      	mov	r1, r0
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	60ba      	str	r2, [r7, #8]
 80004fe:	b2ca      	uxtb	r2, r1
 8000500:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	3301      	adds	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	429a      	cmp	r2, r3
 800050e:	dbf0      	blt.n	80004f2 <_read+0x12>
  }

  return len;
 8000510:	687b      	ldr	r3, [r7, #4]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b086      	sub	sp, #24
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e009      	b.n	8000540 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ffab 	bl	8000490 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	3301      	adds	r3, #1
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	dbf1      	blt.n	800052c <_write+0x12>
//    __io_putchar(*ptr++);
  }
  return len;
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <_close>:

int _close(int file)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800057a:	605a      	str	r2, [r3, #4]
  return 0;
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <_isatty>:

int _isatty(int file)
{
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <_sbrk+0x5c>)
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <_sbrk+0x60>)
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d102      	bne.n	80005de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <_sbrk+0x64>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <_sbrk+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d207      	bcs.n	80005fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005ec:	f000 f846 	bl	800067c <__errno>
 80005f0:	4603      	mov	r3, r0
 80005f2:	220c      	movs	r2, #12
 80005f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fa:	e009      	b.n	8000610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	4a05      	ldr	r2, [pc, #20]	; (8000620 <_sbrk+0x64>)
 800060c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20010000 	.word	0x20010000
 800061c:	00000400 	.word	0x00000400
 8000620:	200000a4 	.word	0x200000a4
 8000624:	200000b8 	.word	0x200000b8

08000628 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800062c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <LoopForever+0x6>)
  ldr r1, =_edata
 8000632:	490d      	ldr	r1, [pc, #52]	; (8000668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <LoopForever+0xe>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000648:	4c0a      	ldr	r4, [pc, #40]	; (8000674 <LoopForever+0x16>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000656:	f000 f817 	bl	8000688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065a:	f7ff fdcd 	bl	80001f8 <main>

0800065e <LoopForever>:

LoopForever:
  b LoopForever
 800065e:	e7fe      	b.n	800065e <LoopForever>
  ldr   r0, =_estack
 8000660:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800066c:	080011c8 	.word	0x080011c8
  ldr r2, =_sbss
 8000670:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000674:	200000b8 	.word	0x200000b8

08000678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC1_2_IRQHandler>
	...

0800067c <__errno>:
 800067c:	4b01      	ldr	r3, [pc, #4]	; (8000684 <__errno+0x8>)
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000010 	.word	0x20000010

08000688 <__libc_init_array>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	4d0d      	ldr	r5, [pc, #52]	; (80006c0 <__libc_init_array+0x38>)
 800068c:	4c0d      	ldr	r4, [pc, #52]	; (80006c4 <__libc_init_array+0x3c>)
 800068e:	1b64      	subs	r4, r4, r5
 8000690:	10a4      	asrs	r4, r4, #2
 8000692:	2600      	movs	r6, #0
 8000694:	42a6      	cmp	r6, r4
 8000696:	d109      	bne.n	80006ac <__libc_init_array+0x24>
 8000698:	4d0b      	ldr	r5, [pc, #44]	; (80006c8 <__libc_init_array+0x40>)
 800069a:	4c0c      	ldr	r4, [pc, #48]	; (80006cc <__libc_init_array+0x44>)
 800069c:	f000 fd1e 	bl	80010dc <_init>
 80006a0:	1b64      	subs	r4, r4, r5
 80006a2:	10a4      	asrs	r4, r4, #2
 80006a4:	2600      	movs	r6, #0
 80006a6:	42a6      	cmp	r6, r4
 80006a8:	d105      	bne.n	80006b6 <__libc_init_array+0x2e>
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b0:	4798      	blx	r3
 80006b2:	3601      	adds	r6, #1
 80006b4:	e7ee      	b.n	8000694 <__libc_init_array+0xc>
 80006b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ba:	4798      	blx	r3
 80006bc:	3601      	adds	r6, #1
 80006be:	e7f2      	b.n	80006a6 <__libc_init_array+0x1e>
 80006c0:	080011c0 	.word	0x080011c0
 80006c4:	080011c0 	.word	0x080011c0
 80006c8:	080011c0 	.word	0x080011c0
 80006cc:	080011c4 	.word	0x080011c4

080006d0 <memset>:
 80006d0:	4402      	add	r2, r0
 80006d2:	4603      	mov	r3, r0
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d100      	bne.n	80006da <memset+0xa>
 80006d8:	4770      	bx	lr
 80006da:	f803 1b01 	strb.w	r1, [r3], #1
 80006de:	e7f9      	b.n	80006d4 <memset+0x4>

080006e0 <_puts_r>:
 80006e0:	b570      	push	{r4, r5, r6, lr}
 80006e2:	460e      	mov	r6, r1
 80006e4:	4605      	mov	r5, r0
 80006e6:	b118      	cbz	r0, 80006f0 <_puts_r+0x10>
 80006e8:	6983      	ldr	r3, [r0, #24]
 80006ea:	b90b      	cbnz	r3, 80006f0 <_puts_r+0x10>
 80006ec:	f000 fa48 	bl	8000b80 <__sinit>
 80006f0:	69ab      	ldr	r3, [r5, #24]
 80006f2:	68ac      	ldr	r4, [r5, #8]
 80006f4:	b913      	cbnz	r3, 80006fc <_puts_r+0x1c>
 80006f6:	4628      	mov	r0, r5
 80006f8:	f000 fa42 	bl	8000b80 <__sinit>
 80006fc:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <_puts_r+0xd0>)
 80006fe:	429c      	cmp	r4, r3
 8000700:	d120      	bne.n	8000744 <_puts_r+0x64>
 8000702:	686c      	ldr	r4, [r5, #4]
 8000704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000706:	07db      	lsls	r3, r3, #31
 8000708:	d405      	bmi.n	8000716 <_puts_r+0x36>
 800070a:	89a3      	ldrh	r3, [r4, #12]
 800070c:	0598      	lsls	r0, r3, #22
 800070e:	d402      	bmi.n	8000716 <_puts_r+0x36>
 8000710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000712:	f000 fad3 	bl	8000cbc <__retarget_lock_acquire_recursive>
 8000716:	89a3      	ldrh	r3, [r4, #12]
 8000718:	0719      	lsls	r1, r3, #28
 800071a:	d51d      	bpl.n	8000758 <_puts_r+0x78>
 800071c:	6923      	ldr	r3, [r4, #16]
 800071e:	b1db      	cbz	r3, 8000758 <_puts_r+0x78>
 8000720:	3e01      	subs	r6, #1
 8000722:	68a3      	ldr	r3, [r4, #8]
 8000724:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000728:	3b01      	subs	r3, #1
 800072a:	60a3      	str	r3, [r4, #8]
 800072c:	bb39      	cbnz	r1, 800077e <_puts_r+0x9e>
 800072e:	2b00      	cmp	r3, #0
 8000730:	da38      	bge.n	80007a4 <_puts_r+0xc4>
 8000732:	4622      	mov	r2, r4
 8000734:	210a      	movs	r1, #10
 8000736:	4628      	mov	r0, r5
 8000738:	f000 f848 	bl	80007cc <__swbuf_r>
 800073c:	3001      	adds	r0, #1
 800073e:	d011      	beq.n	8000764 <_puts_r+0x84>
 8000740:	250a      	movs	r5, #10
 8000742:	e011      	b.n	8000768 <_puts_r+0x88>
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <_puts_r+0xd4>)
 8000746:	429c      	cmp	r4, r3
 8000748:	d101      	bne.n	800074e <_puts_r+0x6e>
 800074a:	68ac      	ldr	r4, [r5, #8]
 800074c:	e7da      	b.n	8000704 <_puts_r+0x24>
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <_puts_r+0xd8>)
 8000750:	429c      	cmp	r4, r3
 8000752:	bf08      	it	eq
 8000754:	68ec      	ldreq	r4, [r5, #12]
 8000756:	e7d5      	b.n	8000704 <_puts_r+0x24>
 8000758:	4621      	mov	r1, r4
 800075a:	4628      	mov	r0, r5
 800075c:	f000 f888 	bl	8000870 <__swsetup_r>
 8000760:	2800      	cmp	r0, #0
 8000762:	d0dd      	beq.n	8000720 <_puts_r+0x40>
 8000764:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000768:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800076a:	07da      	lsls	r2, r3, #31
 800076c:	d405      	bmi.n	800077a <_puts_r+0x9a>
 800076e:	89a3      	ldrh	r3, [r4, #12]
 8000770:	059b      	lsls	r3, r3, #22
 8000772:	d402      	bmi.n	800077a <_puts_r+0x9a>
 8000774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000776:	f000 faa2 	bl	8000cbe <__retarget_lock_release_recursive>
 800077a:	4628      	mov	r0, r5
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	2b00      	cmp	r3, #0
 8000780:	da04      	bge.n	800078c <_puts_r+0xac>
 8000782:	69a2      	ldr	r2, [r4, #24]
 8000784:	429a      	cmp	r2, r3
 8000786:	dc06      	bgt.n	8000796 <_puts_r+0xb6>
 8000788:	290a      	cmp	r1, #10
 800078a:	d004      	beq.n	8000796 <_puts_r+0xb6>
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	6022      	str	r2, [r4, #0]
 8000792:	7019      	strb	r1, [r3, #0]
 8000794:	e7c5      	b.n	8000722 <_puts_r+0x42>
 8000796:	4622      	mov	r2, r4
 8000798:	4628      	mov	r0, r5
 800079a:	f000 f817 	bl	80007cc <__swbuf_r>
 800079e:	3001      	adds	r0, #1
 80007a0:	d1bf      	bne.n	8000722 <_puts_r+0x42>
 80007a2:	e7df      	b.n	8000764 <_puts_r+0x84>
 80007a4:	6823      	ldr	r3, [r4, #0]
 80007a6:	250a      	movs	r5, #10
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	6022      	str	r2, [r4, #0]
 80007ac:	701d      	strb	r5, [r3, #0]
 80007ae:	e7db      	b.n	8000768 <_puts_r+0x88>
 80007b0:	08001180 	.word	0x08001180
 80007b4:	080011a0 	.word	0x080011a0
 80007b8:	08001160 	.word	0x08001160

080007bc <puts>:
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <puts+0xc>)
 80007be:	4601      	mov	r1, r0
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	f7ff bf8d 	b.w	80006e0 <_puts_r>
 80007c6:	bf00      	nop
 80007c8:	20000010 	.word	0x20000010

080007cc <__swbuf_r>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	460e      	mov	r6, r1
 80007d0:	4614      	mov	r4, r2
 80007d2:	4605      	mov	r5, r0
 80007d4:	b118      	cbz	r0, 80007de <__swbuf_r+0x12>
 80007d6:	6983      	ldr	r3, [r0, #24]
 80007d8:	b90b      	cbnz	r3, 80007de <__swbuf_r+0x12>
 80007da:	f000 f9d1 	bl	8000b80 <__sinit>
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <__swbuf_r+0x98>)
 80007e0:	429c      	cmp	r4, r3
 80007e2:	d12b      	bne.n	800083c <__swbuf_r+0x70>
 80007e4:	686c      	ldr	r4, [r5, #4]
 80007e6:	69a3      	ldr	r3, [r4, #24]
 80007e8:	60a3      	str	r3, [r4, #8]
 80007ea:	89a3      	ldrh	r3, [r4, #12]
 80007ec:	071a      	lsls	r2, r3, #28
 80007ee:	d52f      	bpl.n	8000850 <__swbuf_r+0x84>
 80007f0:	6923      	ldr	r3, [r4, #16]
 80007f2:	b36b      	cbz	r3, 8000850 <__swbuf_r+0x84>
 80007f4:	6923      	ldr	r3, [r4, #16]
 80007f6:	6820      	ldr	r0, [r4, #0]
 80007f8:	1ac0      	subs	r0, r0, r3
 80007fa:	6963      	ldr	r3, [r4, #20]
 80007fc:	b2f6      	uxtb	r6, r6
 80007fe:	4283      	cmp	r3, r0
 8000800:	4637      	mov	r7, r6
 8000802:	dc04      	bgt.n	800080e <__swbuf_r+0x42>
 8000804:	4621      	mov	r1, r4
 8000806:	4628      	mov	r0, r5
 8000808:	f000 f926 	bl	8000a58 <_fflush_r>
 800080c:	bb30      	cbnz	r0, 800085c <__swbuf_r+0x90>
 800080e:	68a3      	ldr	r3, [r4, #8]
 8000810:	3b01      	subs	r3, #1
 8000812:	60a3      	str	r3, [r4, #8]
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	6022      	str	r2, [r4, #0]
 800081a:	701e      	strb	r6, [r3, #0]
 800081c:	6963      	ldr	r3, [r4, #20]
 800081e:	3001      	adds	r0, #1
 8000820:	4283      	cmp	r3, r0
 8000822:	d004      	beq.n	800082e <__swbuf_r+0x62>
 8000824:	89a3      	ldrh	r3, [r4, #12]
 8000826:	07db      	lsls	r3, r3, #31
 8000828:	d506      	bpl.n	8000838 <__swbuf_r+0x6c>
 800082a:	2e0a      	cmp	r6, #10
 800082c:	d104      	bne.n	8000838 <__swbuf_r+0x6c>
 800082e:	4621      	mov	r1, r4
 8000830:	4628      	mov	r0, r5
 8000832:	f000 f911 	bl	8000a58 <_fflush_r>
 8000836:	b988      	cbnz	r0, 800085c <__swbuf_r+0x90>
 8000838:	4638      	mov	r0, r7
 800083a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <__swbuf_r+0x9c>)
 800083e:	429c      	cmp	r4, r3
 8000840:	d101      	bne.n	8000846 <__swbuf_r+0x7a>
 8000842:	68ac      	ldr	r4, [r5, #8]
 8000844:	e7cf      	b.n	80007e6 <__swbuf_r+0x1a>
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <__swbuf_r+0xa0>)
 8000848:	429c      	cmp	r4, r3
 800084a:	bf08      	it	eq
 800084c:	68ec      	ldreq	r4, [r5, #12]
 800084e:	e7ca      	b.n	80007e6 <__swbuf_r+0x1a>
 8000850:	4621      	mov	r1, r4
 8000852:	4628      	mov	r0, r5
 8000854:	f000 f80c 	bl	8000870 <__swsetup_r>
 8000858:	2800      	cmp	r0, #0
 800085a:	d0cb      	beq.n	80007f4 <__swbuf_r+0x28>
 800085c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000860:	e7ea      	b.n	8000838 <__swbuf_r+0x6c>
 8000862:	bf00      	nop
 8000864:	08001180 	.word	0x08001180
 8000868:	080011a0 	.word	0x080011a0
 800086c:	08001160 	.word	0x08001160

08000870 <__swsetup_r>:
 8000870:	4b32      	ldr	r3, [pc, #200]	; (800093c <__swsetup_r+0xcc>)
 8000872:	b570      	push	{r4, r5, r6, lr}
 8000874:	681d      	ldr	r5, [r3, #0]
 8000876:	4606      	mov	r6, r0
 8000878:	460c      	mov	r4, r1
 800087a:	b125      	cbz	r5, 8000886 <__swsetup_r+0x16>
 800087c:	69ab      	ldr	r3, [r5, #24]
 800087e:	b913      	cbnz	r3, 8000886 <__swsetup_r+0x16>
 8000880:	4628      	mov	r0, r5
 8000882:	f000 f97d 	bl	8000b80 <__sinit>
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <__swsetup_r+0xd0>)
 8000888:	429c      	cmp	r4, r3
 800088a:	d10f      	bne.n	80008ac <__swsetup_r+0x3c>
 800088c:	686c      	ldr	r4, [r5, #4]
 800088e:	89a3      	ldrh	r3, [r4, #12]
 8000890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000894:	0719      	lsls	r1, r3, #28
 8000896:	d42c      	bmi.n	80008f2 <__swsetup_r+0x82>
 8000898:	06dd      	lsls	r5, r3, #27
 800089a:	d411      	bmi.n	80008c0 <__swsetup_r+0x50>
 800089c:	2309      	movs	r3, #9
 800089e:	6033      	str	r3, [r6, #0]
 80008a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008a4:	81a3      	strh	r3, [r4, #12]
 80008a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008aa:	e03e      	b.n	800092a <__swsetup_r+0xba>
 80008ac:	4b25      	ldr	r3, [pc, #148]	; (8000944 <__swsetup_r+0xd4>)
 80008ae:	429c      	cmp	r4, r3
 80008b0:	d101      	bne.n	80008b6 <__swsetup_r+0x46>
 80008b2:	68ac      	ldr	r4, [r5, #8]
 80008b4:	e7eb      	b.n	800088e <__swsetup_r+0x1e>
 80008b6:	4b24      	ldr	r3, [pc, #144]	; (8000948 <__swsetup_r+0xd8>)
 80008b8:	429c      	cmp	r4, r3
 80008ba:	bf08      	it	eq
 80008bc:	68ec      	ldreq	r4, [r5, #12]
 80008be:	e7e6      	b.n	800088e <__swsetup_r+0x1e>
 80008c0:	0758      	lsls	r0, r3, #29
 80008c2:	d512      	bpl.n	80008ea <__swsetup_r+0x7a>
 80008c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008c6:	b141      	cbz	r1, 80008da <__swsetup_r+0x6a>
 80008c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d002      	beq.n	80008d6 <__swsetup_r+0x66>
 80008d0:	4630      	mov	r0, r6
 80008d2:	f000 fa5b 	bl	8000d8c <_free_r>
 80008d6:	2300      	movs	r3, #0
 80008d8:	6363      	str	r3, [r4, #52]	; 0x34
 80008da:	89a3      	ldrh	r3, [r4, #12]
 80008dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008e0:	81a3      	strh	r3, [r4, #12]
 80008e2:	2300      	movs	r3, #0
 80008e4:	6063      	str	r3, [r4, #4]
 80008e6:	6923      	ldr	r3, [r4, #16]
 80008e8:	6023      	str	r3, [r4, #0]
 80008ea:	89a3      	ldrh	r3, [r4, #12]
 80008ec:	f043 0308 	orr.w	r3, r3, #8
 80008f0:	81a3      	strh	r3, [r4, #12]
 80008f2:	6923      	ldr	r3, [r4, #16]
 80008f4:	b94b      	cbnz	r3, 800090a <__swsetup_r+0x9a>
 80008f6:	89a3      	ldrh	r3, [r4, #12]
 80008f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000900:	d003      	beq.n	800090a <__swsetup_r+0x9a>
 8000902:	4621      	mov	r1, r4
 8000904:	4630      	mov	r0, r6
 8000906:	f000 fa01 	bl	8000d0c <__smakebuf_r>
 800090a:	89a0      	ldrh	r0, [r4, #12]
 800090c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000910:	f010 0301 	ands.w	r3, r0, #1
 8000914:	d00a      	beq.n	800092c <__swsetup_r+0xbc>
 8000916:	2300      	movs	r3, #0
 8000918:	60a3      	str	r3, [r4, #8]
 800091a:	6963      	ldr	r3, [r4, #20]
 800091c:	425b      	negs	r3, r3
 800091e:	61a3      	str	r3, [r4, #24]
 8000920:	6923      	ldr	r3, [r4, #16]
 8000922:	b943      	cbnz	r3, 8000936 <__swsetup_r+0xc6>
 8000924:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000928:	d1ba      	bne.n	80008a0 <__swsetup_r+0x30>
 800092a:	bd70      	pop	{r4, r5, r6, pc}
 800092c:	0781      	lsls	r1, r0, #30
 800092e:	bf58      	it	pl
 8000930:	6963      	ldrpl	r3, [r4, #20]
 8000932:	60a3      	str	r3, [r4, #8]
 8000934:	e7f4      	b.n	8000920 <__swsetup_r+0xb0>
 8000936:	2000      	movs	r0, #0
 8000938:	e7f7      	b.n	800092a <__swsetup_r+0xba>
 800093a:	bf00      	nop
 800093c:	20000010 	.word	0x20000010
 8000940:	08001180 	.word	0x08001180
 8000944:	080011a0 	.word	0x080011a0
 8000948:	08001160 	.word	0x08001160

0800094c <__sflush_r>:
 800094c:	898a      	ldrh	r2, [r1, #12]
 800094e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000952:	4605      	mov	r5, r0
 8000954:	0710      	lsls	r0, r2, #28
 8000956:	460c      	mov	r4, r1
 8000958:	d458      	bmi.n	8000a0c <__sflush_r+0xc0>
 800095a:	684b      	ldr	r3, [r1, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	dc05      	bgt.n	800096c <__sflush_r+0x20>
 8000960:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000962:	2b00      	cmp	r3, #0
 8000964:	dc02      	bgt.n	800096c <__sflush_r+0x20>
 8000966:	2000      	movs	r0, #0
 8000968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800096c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800096e:	2e00      	cmp	r6, #0
 8000970:	d0f9      	beq.n	8000966 <__sflush_r+0x1a>
 8000972:	2300      	movs	r3, #0
 8000974:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000978:	682f      	ldr	r7, [r5, #0]
 800097a:	602b      	str	r3, [r5, #0]
 800097c:	d032      	beq.n	80009e4 <__sflush_r+0x98>
 800097e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000980:	89a3      	ldrh	r3, [r4, #12]
 8000982:	075a      	lsls	r2, r3, #29
 8000984:	d505      	bpl.n	8000992 <__sflush_r+0x46>
 8000986:	6863      	ldr	r3, [r4, #4]
 8000988:	1ac0      	subs	r0, r0, r3
 800098a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800098c:	b10b      	cbz	r3, 8000992 <__sflush_r+0x46>
 800098e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000990:	1ac0      	subs	r0, r0, r3
 8000992:	2300      	movs	r3, #0
 8000994:	4602      	mov	r2, r0
 8000996:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000998:	6a21      	ldr	r1, [r4, #32]
 800099a:	4628      	mov	r0, r5
 800099c:	47b0      	blx	r6
 800099e:	1c43      	adds	r3, r0, #1
 80009a0:	89a3      	ldrh	r3, [r4, #12]
 80009a2:	d106      	bne.n	80009b2 <__sflush_r+0x66>
 80009a4:	6829      	ldr	r1, [r5, #0]
 80009a6:	291d      	cmp	r1, #29
 80009a8:	d82c      	bhi.n	8000a04 <__sflush_r+0xb8>
 80009aa:	4a2a      	ldr	r2, [pc, #168]	; (8000a54 <__sflush_r+0x108>)
 80009ac:	40ca      	lsrs	r2, r1
 80009ae:	07d6      	lsls	r6, r2, #31
 80009b0:	d528      	bpl.n	8000a04 <__sflush_r+0xb8>
 80009b2:	2200      	movs	r2, #0
 80009b4:	6062      	str	r2, [r4, #4]
 80009b6:	04d9      	lsls	r1, r3, #19
 80009b8:	6922      	ldr	r2, [r4, #16]
 80009ba:	6022      	str	r2, [r4, #0]
 80009bc:	d504      	bpl.n	80009c8 <__sflush_r+0x7c>
 80009be:	1c42      	adds	r2, r0, #1
 80009c0:	d101      	bne.n	80009c6 <__sflush_r+0x7a>
 80009c2:	682b      	ldr	r3, [r5, #0]
 80009c4:	b903      	cbnz	r3, 80009c8 <__sflush_r+0x7c>
 80009c6:	6560      	str	r0, [r4, #84]	; 0x54
 80009c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009ca:	602f      	str	r7, [r5, #0]
 80009cc:	2900      	cmp	r1, #0
 80009ce:	d0ca      	beq.n	8000966 <__sflush_r+0x1a>
 80009d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009d4:	4299      	cmp	r1, r3
 80009d6:	d002      	beq.n	80009de <__sflush_r+0x92>
 80009d8:	4628      	mov	r0, r5
 80009da:	f000 f9d7 	bl	8000d8c <_free_r>
 80009de:	2000      	movs	r0, #0
 80009e0:	6360      	str	r0, [r4, #52]	; 0x34
 80009e2:	e7c1      	b.n	8000968 <__sflush_r+0x1c>
 80009e4:	6a21      	ldr	r1, [r4, #32]
 80009e6:	2301      	movs	r3, #1
 80009e8:	4628      	mov	r0, r5
 80009ea:	47b0      	blx	r6
 80009ec:	1c41      	adds	r1, r0, #1
 80009ee:	d1c7      	bne.n	8000980 <__sflush_r+0x34>
 80009f0:	682b      	ldr	r3, [r5, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d0c4      	beq.n	8000980 <__sflush_r+0x34>
 80009f6:	2b1d      	cmp	r3, #29
 80009f8:	d001      	beq.n	80009fe <__sflush_r+0xb2>
 80009fa:	2b16      	cmp	r3, #22
 80009fc:	d101      	bne.n	8000a02 <__sflush_r+0xb6>
 80009fe:	602f      	str	r7, [r5, #0]
 8000a00:	e7b1      	b.n	8000966 <__sflush_r+0x1a>
 8000a02:	89a3      	ldrh	r3, [r4, #12]
 8000a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a08:	81a3      	strh	r3, [r4, #12]
 8000a0a:	e7ad      	b.n	8000968 <__sflush_r+0x1c>
 8000a0c:	690f      	ldr	r7, [r1, #16]
 8000a0e:	2f00      	cmp	r7, #0
 8000a10:	d0a9      	beq.n	8000966 <__sflush_r+0x1a>
 8000a12:	0793      	lsls	r3, r2, #30
 8000a14:	680e      	ldr	r6, [r1, #0]
 8000a16:	bf08      	it	eq
 8000a18:	694b      	ldreq	r3, [r1, #20]
 8000a1a:	600f      	str	r7, [r1, #0]
 8000a1c:	bf18      	it	ne
 8000a1e:	2300      	movne	r3, #0
 8000a20:	eba6 0807 	sub.w	r8, r6, r7
 8000a24:	608b      	str	r3, [r1, #8]
 8000a26:	f1b8 0f00 	cmp.w	r8, #0
 8000a2a:	dd9c      	ble.n	8000966 <__sflush_r+0x1a>
 8000a2c:	6a21      	ldr	r1, [r4, #32]
 8000a2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a30:	4643      	mov	r3, r8
 8000a32:	463a      	mov	r2, r7
 8000a34:	4628      	mov	r0, r5
 8000a36:	47b0      	blx	r6
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	dc06      	bgt.n	8000a4a <__sflush_r+0xfe>
 8000a3c:	89a3      	ldrh	r3, [r4, #12]
 8000a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a42:	81a3      	strh	r3, [r4, #12]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a48:	e78e      	b.n	8000968 <__sflush_r+0x1c>
 8000a4a:	4407      	add	r7, r0
 8000a4c:	eba8 0800 	sub.w	r8, r8, r0
 8000a50:	e7e9      	b.n	8000a26 <__sflush_r+0xda>
 8000a52:	bf00      	nop
 8000a54:	20400001 	.word	0x20400001

08000a58 <_fflush_r>:
 8000a58:	b538      	push	{r3, r4, r5, lr}
 8000a5a:	690b      	ldr	r3, [r1, #16]
 8000a5c:	4605      	mov	r5, r0
 8000a5e:	460c      	mov	r4, r1
 8000a60:	b913      	cbnz	r3, 8000a68 <_fflush_r+0x10>
 8000a62:	2500      	movs	r5, #0
 8000a64:	4628      	mov	r0, r5
 8000a66:	bd38      	pop	{r3, r4, r5, pc}
 8000a68:	b118      	cbz	r0, 8000a72 <_fflush_r+0x1a>
 8000a6a:	6983      	ldr	r3, [r0, #24]
 8000a6c:	b90b      	cbnz	r3, 8000a72 <_fflush_r+0x1a>
 8000a6e:	f000 f887 	bl	8000b80 <__sinit>
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <_fflush_r+0x6c>)
 8000a74:	429c      	cmp	r4, r3
 8000a76:	d11b      	bne.n	8000ab0 <_fflush_r+0x58>
 8000a78:	686c      	ldr	r4, [r5, #4]
 8000a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0ef      	beq.n	8000a62 <_fflush_r+0xa>
 8000a82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a84:	07d0      	lsls	r0, r2, #31
 8000a86:	d404      	bmi.n	8000a92 <_fflush_r+0x3a>
 8000a88:	0599      	lsls	r1, r3, #22
 8000a8a:	d402      	bmi.n	8000a92 <_fflush_r+0x3a>
 8000a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a8e:	f000 f915 	bl	8000cbc <__retarget_lock_acquire_recursive>
 8000a92:	4628      	mov	r0, r5
 8000a94:	4621      	mov	r1, r4
 8000a96:	f7ff ff59 	bl	800094c <__sflush_r>
 8000a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a9c:	07da      	lsls	r2, r3, #31
 8000a9e:	4605      	mov	r5, r0
 8000aa0:	d4e0      	bmi.n	8000a64 <_fflush_r+0xc>
 8000aa2:	89a3      	ldrh	r3, [r4, #12]
 8000aa4:	059b      	lsls	r3, r3, #22
 8000aa6:	d4dd      	bmi.n	8000a64 <_fflush_r+0xc>
 8000aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000aaa:	f000 f908 	bl	8000cbe <__retarget_lock_release_recursive>
 8000aae:	e7d9      	b.n	8000a64 <_fflush_r+0xc>
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <_fflush_r+0x70>)
 8000ab2:	429c      	cmp	r4, r3
 8000ab4:	d101      	bne.n	8000aba <_fflush_r+0x62>
 8000ab6:	68ac      	ldr	r4, [r5, #8]
 8000ab8:	e7df      	b.n	8000a7a <_fflush_r+0x22>
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <_fflush_r+0x74>)
 8000abc:	429c      	cmp	r4, r3
 8000abe:	bf08      	it	eq
 8000ac0:	68ec      	ldreq	r4, [r5, #12]
 8000ac2:	e7da      	b.n	8000a7a <_fflush_r+0x22>
 8000ac4:	08001180 	.word	0x08001180
 8000ac8:	080011a0 	.word	0x080011a0
 8000acc:	08001160 	.word	0x08001160

08000ad0 <std>:
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	b510      	push	{r4, lr}
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	e9c0 3300 	strd	r3, r3, [r0]
 8000ada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ade:	6083      	str	r3, [r0, #8]
 8000ae0:	8181      	strh	r1, [r0, #12]
 8000ae2:	6643      	str	r3, [r0, #100]	; 0x64
 8000ae4:	81c2      	strh	r2, [r0, #14]
 8000ae6:	6183      	str	r3, [r0, #24]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	2208      	movs	r2, #8
 8000aec:	305c      	adds	r0, #92	; 0x5c
 8000aee:	f7ff fdef 	bl	80006d0 <memset>
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <std+0x38>)
 8000af4:	6263      	str	r3, [r4, #36]	; 0x24
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <std+0x3c>)
 8000af8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <std+0x40>)
 8000afc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <std+0x44>)
 8000b00:	6224      	str	r4, [r4, #32]
 8000b02:	6323      	str	r3, [r4, #48]	; 0x30
 8000b04:	bd10      	pop	{r4, pc}
 8000b06:	bf00      	nop
 8000b08:	08000f6d 	.word	0x08000f6d
 8000b0c:	08000f8f 	.word	0x08000f8f
 8000b10:	08000fc7 	.word	0x08000fc7
 8000b14:	08000feb 	.word	0x08000feb

08000b18 <_cleanup_r>:
 8000b18:	4901      	ldr	r1, [pc, #4]	; (8000b20 <_cleanup_r+0x8>)
 8000b1a:	f000 b8af 	b.w	8000c7c <_fwalk_reent>
 8000b1e:	bf00      	nop
 8000b20:	08000a59 	.word	0x08000a59

08000b24 <__sfmoreglue>:
 8000b24:	b570      	push	{r4, r5, r6, lr}
 8000b26:	2268      	movs	r2, #104	; 0x68
 8000b28:	1e4d      	subs	r5, r1, #1
 8000b2a:	4355      	muls	r5, r2
 8000b2c:	460e      	mov	r6, r1
 8000b2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b32:	f000 f997 	bl	8000e64 <_malloc_r>
 8000b36:	4604      	mov	r4, r0
 8000b38:	b140      	cbz	r0, 8000b4c <__sfmoreglue+0x28>
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	e9c0 1600 	strd	r1, r6, [r0]
 8000b40:	300c      	adds	r0, #12
 8000b42:	60a0      	str	r0, [r4, #8]
 8000b44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b48:	f7ff fdc2 	bl	80006d0 <memset>
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	bd70      	pop	{r4, r5, r6, pc}

08000b50 <__sfp_lock_acquire>:
 8000b50:	4801      	ldr	r0, [pc, #4]	; (8000b58 <__sfp_lock_acquire+0x8>)
 8000b52:	f000 b8b3 	b.w	8000cbc <__retarget_lock_acquire_recursive>
 8000b56:	bf00      	nop
 8000b58:	200000a9 	.word	0x200000a9

08000b5c <__sfp_lock_release>:
 8000b5c:	4801      	ldr	r0, [pc, #4]	; (8000b64 <__sfp_lock_release+0x8>)
 8000b5e:	f000 b8ae 	b.w	8000cbe <__retarget_lock_release_recursive>
 8000b62:	bf00      	nop
 8000b64:	200000a9 	.word	0x200000a9

08000b68 <__sinit_lock_acquire>:
 8000b68:	4801      	ldr	r0, [pc, #4]	; (8000b70 <__sinit_lock_acquire+0x8>)
 8000b6a:	f000 b8a7 	b.w	8000cbc <__retarget_lock_acquire_recursive>
 8000b6e:	bf00      	nop
 8000b70:	200000aa 	.word	0x200000aa

08000b74 <__sinit_lock_release>:
 8000b74:	4801      	ldr	r0, [pc, #4]	; (8000b7c <__sinit_lock_release+0x8>)
 8000b76:	f000 b8a2 	b.w	8000cbe <__retarget_lock_release_recursive>
 8000b7a:	bf00      	nop
 8000b7c:	200000aa 	.word	0x200000aa

08000b80 <__sinit>:
 8000b80:	b510      	push	{r4, lr}
 8000b82:	4604      	mov	r4, r0
 8000b84:	f7ff fff0 	bl	8000b68 <__sinit_lock_acquire>
 8000b88:	69a3      	ldr	r3, [r4, #24]
 8000b8a:	b11b      	cbz	r3, 8000b94 <__sinit+0x14>
 8000b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b90:	f7ff bff0 	b.w	8000b74 <__sinit_lock_release>
 8000b94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b98:	6523      	str	r3, [r4, #80]	; 0x50
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <__sinit+0x68>)
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <__sinit+0x6c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	62a2      	str	r2, [r4, #40]	; 0x28
 8000ba2:	42a3      	cmp	r3, r4
 8000ba4:	bf04      	itt	eq
 8000ba6:	2301      	moveq	r3, #1
 8000ba8:	61a3      	streq	r3, [r4, #24]
 8000baa:	4620      	mov	r0, r4
 8000bac:	f000 f820 	bl	8000bf0 <__sfp>
 8000bb0:	6060      	str	r0, [r4, #4]
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f000 f81c 	bl	8000bf0 <__sfp>
 8000bb8:	60a0      	str	r0, [r4, #8]
 8000bba:	4620      	mov	r0, r4
 8000bbc:	f000 f818 	bl	8000bf0 <__sfp>
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60e0      	str	r0, [r4, #12]
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	6860      	ldr	r0, [r4, #4]
 8000bc8:	f7ff ff82 	bl	8000ad0 <std>
 8000bcc:	68a0      	ldr	r0, [r4, #8]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2109      	movs	r1, #9
 8000bd2:	f7ff ff7d 	bl	8000ad0 <std>
 8000bd6:	68e0      	ldr	r0, [r4, #12]
 8000bd8:	2202      	movs	r2, #2
 8000bda:	2112      	movs	r1, #18
 8000bdc:	f7ff ff78 	bl	8000ad0 <std>
 8000be0:	2301      	movs	r3, #1
 8000be2:	61a3      	str	r3, [r4, #24]
 8000be4:	e7d2      	b.n	8000b8c <__sinit+0xc>
 8000be6:	bf00      	nop
 8000be8:	0800115c 	.word	0x0800115c
 8000bec:	08000b19 	.word	0x08000b19

08000bf0 <__sfp>:
 8000bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf2:	4607      	mov	r7, r0
 8000bf4:	f7ff ffac 	bl	8000b50 <__sfp_lock_acquire>
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <__sfp+0x84>)
 8000bfa:	681e      	ldr	r6, [r3, #0]
 8000bfc:	69b3      	ldr	r3, [r6, #24]
 8000bfe:	b913      	cbnz	r3, 8000c06 <__sfp+0x16>
 8000c00:	4630      	mov	r0, r6
 8000c02:	f7ff ffbd 	bl	8000b80 <__sinit>
 8000c06:	3648      	adds	r6, #72	; 0x48
 8000c08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	d503      	bpl.n	8000c18 <__sfp+0x28>
 8000c10:	6833      	ldr	r3, [r6, #0]
 8000c12:	b30b      	cbz	r3, 8000c58 <__sfp+0x68>
 8000c14:	6836      	ldr	r6, [r6, #0]
 8000c16:	e7f7      	b.n	8000c08 <__sfp+0x18>
 8000c18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c1c:	b9d5      	cbnz	r5, 8000c54 <__sfp+0x64>
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <__sfp+0x88>)
 8000c20:	60e3      	str	r3, [r4, #12]
 8000c22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c26:	6665      	str	r5, [r4, #100]	; 0x64
 8000c28:	f000 f847 	bl	8000cba <__retarget_lock_init_recursive>
 8000c2c:	f7ff ff96 	bl	8000b5c <__sfp_lock_release>
 8000c30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c38:	6025      	str	r5, [r4, #0]
 8000c3a:	61a5      	str	r5, [r4, #24]
 8000c3c:	2208      	movs	r2, #8
 8000c3e:	4629      	mov	r1, r5
 8000c40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c44:	f7ff fd44 	bl	80006d0 <memset>
 8000c48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c50:	4620      	mov	r0, r4
 8000c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c54:	3468      	adds	r4, #104	; 0x68
 8000c56:	e7d9      	b.n	8000c0c <__sfp+0x1c>
 8000c58:	2104      	movs	r1, #4
 8000c5a:	4638      	mov	r0, r7
 8000c5c:	f7ff ff62 	bl	8000b24 <__sfmoreglue>
 8000c60:	4604      	mov	r4, r0
 8000c62:	6030      	str	r0, [r6, #0]
 8000c64:	2800      	cmp	r0, #0
 8000c66:	d1d5      	bne.n	8000c14 <__sfp+0x24>
 8000c68:	f7ff ff78 	bl	8000b5c <__sfp_lock_release>
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	e7ee      	b.n	8000c50 <__sfp+0x60>
 8000c72:	bf00      	nop
 8000c74:	0800115c 	.word	0x0800115c
 8000c78:	ffff0001 	.word	0xffff0001

08000c7c <_fwalk_reent>:
 8000c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c80:	4606      	mov	r6, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c8e:	f1b9 0901 	subs.w	r9, r9, #1
 8000c92:	d505      	bpl.n	8000ca0 <_fwalk_reent+0x24>
 8000c94:	6824      	ldr	r4, [r4, #0]
 8000c96:	2c00      	cmp	r4, #0
 8000c98:	d1f7      	bne.n	8000c8a <_fwalk_reent+0xe>
 8000c9a:	4638      	mov	r0, r7
 8000c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ca0:	89ab      	ldrh	r3, [r5, #12]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d907      	bls.n	8000cb6 <_fwalk_reent+0x3a>
 8000ca6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000caa:	3301      	adds	r3, #1
 8000cac:	d003      	beq.n	8000cb6 <_fwalk_reent+0x3a>
 8000cae:	4629      	mov	r1, r5
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	47c0      	blx	r8
 8000cb4:	4307      	orrs	r7, r0
 8000cb6:	3568      	adds	r5, #104	; 0x68
 8000cb8:	e7e9      	b.n	8000c8e <_fwalk_reent+0x12>

08000cba <__retarget_lock_init_recursive>:
 8000cba:	4770      	bx	lr

08000cbc <__retarget_lock_acquire_recursive>:
 8000cbc:	4770      	bx	lr

08000cbe <__retarget_lock_release_recursive>:
 8000cbe:	4770      	bx	lr

08000cc0 <__swhatbuf_r>:
 8000cc0:	b570      	push	{r4, r5, r6, lr}
 8000cc2:	460e      	mov	r6, r1
 8000cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	b096      	sub	sp, #88	; 0x58
 8000ccc:	4614      	mov	r4, r2
 8000cce:	461d      	mov	r5, r3
 8000cd0:	da08      	bge.n	8000ce4 <__swhatbuf_r+0x24>
 8000cd2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	602a      	str	r2, [r5, #0]
 8000cda:	061a      	lsls	r2, r3, #24
 8000cdc:	d410      	bmi.n	8000d00 <__swhatbuf_r+0x40>
 8000cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce2:	e00e      	b.n	8000d02 <__swhatbuf_r+0x42>
 8000ce4:	466a      	mov	r2, sp
 8000ce6:	f000 f9a7 	bl	8001038 <_fstat_r>
 8000cea:	2800      	cmp	r0, #0
 8000cec:	dbf1      	blt.n	8000cd2 <__swhatbuf_r+0x12>
 8000cee:	9a01      	ldr	r2, [sp, #4]
 8000cf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000cf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000cf8:	425a      	negs	r2, r3
 8000cfa:	415a      	adcs	r2, r3
 8000cfc:	602a      	str	r2, [r5, #0]
 8000cfe:	e7ee      	b.n	8000cde <__swhatbuf_r+0x1e>
 8000d00:	2340      	movs	r3, #64	; 0x40
 8000d02:	2000      	movs	r0, #0
 8000d04:	6023      	str	r3, [r4, #0]
 8000d06:	b016      	add	sp, #88	; 0x58
 8000d08:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d0c <__smakebuf_r>:
 8000d0c:	898b      	ldrh	r3, [r1, #12]
 8000d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d10:	079d      	lsls	r5, r3, #30
 8000d12:	4606      	mov	r6, r0
 8000d14:	460c      	mov	r4, r1
 8000d16:	d507      	bpl.n	8000d28 <__smakebuf_r+0x1c>
 8000d18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d1c:	6023      	str	r3, [r4, #0]
 8000d1e:	6123      	str	r3, [r4, #16]
 8000d20:	2301      	movs	r3, #1
 8000d22:	6163      	str	r3, [r4, #20]
 8000d24:	b002      	add	sp, #8
 8000d26:	bd70      	pop	{r4, r5, r6, pc}
 8000d28:	ab01      	add	r3, sp, #4
 8000d2a:	466a      	mov	r2, sp
 8000d2c:	f7ff ffc8 	bl	8000cc0 <__swhatbuf_r>
 8000d30:	9900      	ldr	r1, [sp, #0]
 8000d32:	4605      	mov	r5, r0
 8000d34:	4630      	mov	r0, r6
 8000d36:	f000 f895 	bl	8000e64 <_malloc_r>
 8000d3a:	b948      	cbnz	r0, 8000d50 <__smakebuf_r+0x44>
 8000d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d40:	059a      	lsls	r2, r3, #22
 8000d42:	d4ef      	bmi.n	8000d24 <__smakebuf_r+0x18>
 8000d44:	f023 0303 	bic.w	r3, r3, #3
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	81a3      	strh	r3, [r4, #12]
 8000d4e:	e7e3      	b.n	8000d18 <__smakebuf_r+0xc>
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <__smakebuf_r+0x7c>)
 8000d52:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d54:	89a3      	ldrh	r3, [r4, #12]
 8000d56:	6020      	str	r0, [r4, #0]
 8000d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5c:	81a3      	strh	r3, [r4, #12]
 8000d5e:	9b00      	ldr	r3, [sp, #0]
 8000d60:	6163      	str	r3, [r4, #20]
 8000d62:	9b01      	ldr	r3, [sp, #4]
 8000d64:	6120      	str	r0, [r4, #16]
 8000d66:	b15b      	cbz	r3, 8000d80 <__smakebuf_r+0x74>
 8000d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	f000 f975 	bl	800105c <_isatty_r>
 8000d72:	b128      	cbz	r0, 8000d80 <__smakebuf_r+0x74>
 8000d74:	89a3      	ldrh	r3, [r4, #12]
 8000d76:	f023 0303 	bic.w	r3, r3, #3
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	81a3      	strh	r3, [r4, #12]
 8000d80:	89a0      	ldrh	r0, [r4, #12]
 8000d82:	4305      	orrs	r5, r0
 8000d84:	81a5      	strh	r5, [r4, #12]
 8000d86:	e7cd      	b.n	8000d24 <__smakebuf_r+0x18>
 8000d88:	08000b19 	.word	0x08000b19

08000d8c <_free_r>:
 8000d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d044      	beq.n	8000e1c <_free_r+0x90>
 8000d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d96:	9001      	str	r0, [sp, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8000d9e:	bfb8      	it	lt
 8000da0:	18e4      	addlt	r4, r4, r3
 8000da2:	f000 f97d 	bl	80010a0 <__malloc_lock>
 8000da6:	4a1e      	ldr	r2, [pc, #120]	; (8000e20 <_free_r+0x94>)
 8000da8:	9801      	ldr	r0, [sp, #4]
 8000daa:	6813      	ldr	r3, [r2, #0]
 8000dac:	b933      	cbnz	r3, 8000dbc <_free_r+0x30>
 8000dae:	6063      	str	r3, [r4, #4]
 8000db0:	6014      	str	r4, [r2, #0]
 8000db2:	b003      	add	sp, #12
 8000db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000db8:	f000 b978 	b.w	80010ac <__malloc_unlock>
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d908      	bls.n	8000dd2 <_free_r+0x46>
 8000dc0:	6825      	ldr	r5, [r4, #0]
 8000dc2:	1961      	adds	r1, r4, r5
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	bf01      	itttt	eq
 8000dc8:	6819      	ldreq	r1, [r3, #0]
 8000dca:	685b      	ldreq	r3, [r3, #4]
 8000dcc:	1949      	addeq	r1, r1, r5
 8000dce:	6021      	streq	r1, [r4, #0]
 8000dd0:	e7ed      	b.n	8000dae <_free_r+0x22>
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	b10b      	cbz	r3, 8000ddc <_free_r+0x50>
 8000dd8:	42a3      	cmp	r3, r4
 8000dda:	d9fa      	bls.n	8000dd2 <_free_r+0x46>
 8000ddc:	6811      	ldr	r1, [r2, #0]
 8000dde:	1855      	adds	r5, r2, r1
 8000de0:	42a5      	cmp	r5, r4
 8000de2:	d10b      	bne.n	8000dfc <_free_r+0x70>
 8000de4:	6824      	ldr	r4, [r4, #0]
 8000de6:	4421      	add	r1, r4
 8000de8:	1854      	adds	r4, r2, r1
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	6011      	str	r1, [r2, #0]
 8000dee:	d1e0      	bne.n	8000db2 <_free_r+0x26>
 8000df0:	681c      	ldr	r4, [r3, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	6053      	str	r3, [r2, #4]
 8000df6:	4421      	add	r1, r4
 8000df8:	6011      	str	r1, [r2, #0]
 8000dfa:	e7da      	b.n	8000db2 <_free_r+0x26>
 8000dfc:	d902      	bls.n	8000e04 <_free_r+0x78>
 8000dfe:	230c      	movs	r3, #12
 8000e00:	6003      	str	r3, [r0, #0]
 8000e02:	e7d6      	b.n	8000db2 <_free_r+0x26>
 8000e04:	6825      	ldr	r5, [r4, #0]
 8000e06:	1961      	adds	r1, r4, r5
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	bf04      	itt	eq
 8000e0c:	6819      	ldreq	r1, [r3, #0]
 8000e0e:	685b      	ldreq	r3, [r3, #4]
 8000e10:	6063      	str	r3, [r4, #4]
 8000e12:	bf04      	itt	eq
 8000e14:	1949      	addeq	r1, r1, r5
 8000e16:	6021      	streq	r1, [r4, #0]
 8000e18:	6054      	str	r4, [r2, #4]
 8000e1a:	e7ca      	b.n	8000db2 <_free_r+0x26>
 8000e1c:	b003      	add	sp, #12
 8000e1e:	bd30      	pop	{r4, r5, pc}
 8000e20:	200000ac 	.word	0x200000ac

08000e24 <sbrk_aligned>:
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	4e0e      	ldr	r6, [pc, #56]	; (8000e60 <sbrk_aligned+0x3c>)
 8000e28:	460c      	mov	r4, r1
 8000e2a:	6831      	ldr	r1, [r6, #0]
 8000e2c:	4605      	mov	r5, r0
 8000e2e:	b911      	cbnz	r1, 8000e36 <sbrk_aligned+0x12>
 8000e30:	f000 f88c 	bl	8000f4c <_sbrk_r>
 8000e34:	6030      	str	r0, [r6, #0]
 8000e36:	4621      	mov	r1, r4
 8000e38:	4628      	mov	r0, r5
 8000e3a:	f000 f887 	bl	8000f4c <_sbrk_r>
 8000e3e:	1c43      	adds	r3, r0, #1
 8000e40:	d00a      	beq.n	8000e58 <sbrk_aligned+0x34>
 8000e42:	1cc4      	adds	r4, r0, #3
 8000e44:	f024 0403 	bic.w	r4, r4, #3
 8000e48:	42a0      	cmp	r0, r4
 8000e4a:	d007      	beq.n	8000e5c <sbrk_aligned+0x38>
 8000e4c:	1a21      	subs	r1, r4, r0
 8000e4e:	4628      	mov	r0, r5
 8000e50:	f000 f87c 	bl	8000f4c <_sbrk_r>
 8000e54:	3001      	adds	r0, #1
 8000e56:	d101      	bne.n	8000e5c <sbrk_aligned+0x38>
 8000e58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	bd70      	pop	{r4, r5, r6, pc}
 8000e60:	200000b0 	.word	0x200000b0

08000e64 <_malloc_r>:
 8000e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e68:	1ccd      	adds	r5, r1, #3
 8000e6a:	f025 0503 	bic.w	r5, r5, #3
 8000e6e:	3508      	adds	r5, #8
 8000e70:	2d0c      	cmp	r5, #12
 8000e72:	bf38      	it	cc
 8000e74:	250c      	movcc	r5, #12
 8000e76:	2d00      	cmp	r5, #0
 8000e78:	4607      	mov	r7, r0
 8000e7a:	db01      	blt.n	8000e80 <_malloc_r+0x1c>
 8000e7c:	42a9      	cmp	r1, r5
 8000e7e:	d905      	bls.n	8000e8c <_malloc_r+0x28>
 8000e80:	230c      	movs	r3, #12
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	2600      	movs	r6, #0
 8000e86:	4630      	mov	r0, r6
 8000e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e8c:	4e2e      	ldr	r6, [pc, #184]	; (8000f48 <_malloc_r+0xe4>)
 8000e8e:	f000 f907 	bl	80010a0 <__malloc_lock>
 8000e92:	6833      	ldr	r3, [r6, #0]
 8000e94:	461c      	mov	r4, r3
 8000e96:	bb34      	cbnz	r4, 8000ee6 <_malloc_r+0x82>
 8000e98:	4629      	mov	r1, r5
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	f7ff ffc2 	bl	8000e24 <sbrk_aligned>
 8000ea0:	1c43      	adds	r3, r0, #1
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	d14d      	bne.n	8000f42 <_malloc_r+0xde>
 8000ea6:	6834      	ldr	r4, [r6, #0]
 8000ea8:	4626      	mov	r6, r4
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	d140      	bne.n	8000f30 <_malloc_r+0xcc>
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	4638      	mov	r0, r7
 8000eb4:	eb04 0803 	add.w	r8, r4, r3
 8000eb8:	f000 f848 	bl	8000f4c <_sbrk_r>
 8000ebc:	4580      	cmp	r8, r0
 8000ebe:	d13a      	bne.n	8000f36 <_malloc_r+0xd2>
 8000ec0:	6821      	ldr	r1, [r4, #0]
 8000ec2:	3503      	adds	r5, #3
 8000ec4:	1a6d      	subs	r5, r5, r1
 8000ec6:	f025 0503 	bic.w	r5, r5, #3
 8000eca:	3508      	adds	r5, #8
 8000ecc:	2d0c      	cmp	r5, #12
 8000ece:	bf38      	it	cc
 8000ed0:	250c      	movcc	r5, #12
 8000ed2:	4629      	mov	r1, r5
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	f7ff ffa5 	bl	8000e24 <sbrk_aligned>
 8000eda:	3001      	adds	r0, #1
 8000edc:	d02b      	beq.n	8000f36 <_malloc_r+0xd2>
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	442b      	add	r3, r5
 8000ee2:	6023      	str	r3, [r4, #0]
 8000ee4:	e00e      	b.n	8000f04 <_malloc_r+0xa0>
 8000ee6:	6822      	ldr	r2, [r4, #0]
 8000ee8:	1b52      	subs	r2, r2, r5
 8000eea:	d41e      	bmi.n	8000f2a <_malloc_r+0xc6>
 8000eec:	2a0b      	cmp	r2, #11
 8000eee:	d916      	bls.n	8000f1e <_malloc_r+0xba>
 8000ef0:	1961      	adds	r1, r4, r5
 8000ef2:	42a3      	cmp	r3, r4
 8000ef4:	6025      	str	r5, [r4, #0]
 8000ef6:	bf18      	it	ne
 8000ef8:	6059      	strne	r1, [r3, #4]
 8000efa:	6863      	ldr	r3, [r4, #4]
 8000efc:	bf08      	it	eq
 8000efe:	6031      	streq	r1, [r6, #0]
 8000f00:	5162      	str	r2, [r4, r5]
 8000f02:	604b      	str	r3, [r1, #4]
 8000f04:	4638      	mov	r0, r7
 8000f06:	f104 060b 	add.w	r6, r4, #11
 8000f0a:	f000 f8cf 	bl	80010ac <__malloc_unlock>
 8000f0e:	f026 0607 	bic.w	r6, r6, #7
 8000f12:	1d23      	adds	r3, r4, #4
 8000f14:	1af2      	subs	r2, r6, r3
 8000f16:	d0b6      	beq.n	8000e86 <_malloc_r+0x22>
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	50a3      	str	r3, [r4, r2]
 8000f1c:	e7b3      	b.n	8000e86 <_malloc_r+0x22>
 8000f1e:	6862      	ldr	r2, [r4, #4]
 8000f20:	42a3      	cmp	r3, r4
 8000f22:	bf0c      	ite	eq
 8000f24:	6032      	streq	r2, [r6, #0]
 8000f26:	605a      	strne	r2, [r3, #4]
 8000f28:	e7ec      	b.n	8000f04 <_malloc_r+0xa0>
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	6864      	ldr	r4, [r4, #4]
 8000f2e:	e7b2      	b.n	8000e96 <_malloc_r+0x32>
 8000f30:	4634      	mov	r4, r6
 8000f32:	6876      	ldr	r6, [r6, #4]
 8000f34:	e7b9      	b.n	8000eaa <_malloc_r+0x46>
 8000f36:	230c      	movs	r3, #12
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	4638      	mov	r0, r7
 8000f3c:	f000 f8b6 	bl	80010ac <__malloc_unlock>
 8000f40:	e7a1      	b.n	8000e86 <_malloc_r+0x22>
 8000f42:	6025      	str	r5, [r4, #0]
 8000f44:	e7de      	b.n	8000f04 <_malloc_r+0xa0>
 8000f46:	bf00      	nop
 8000f48:	200000ac 	.word	0x200000ac

08000f4c <_sbrk_r>:
 8000f4c:	b538      	push	{r3, r4, r5, lr}
 8000f4e:	4d06      	ldr	r5, [pc, #24]	; (8000f68 <_sbrk_r+0x1c>)
 8000f50:	2300      	movs	r3, #0
 8000f52:	4604      	mov	r4, r0
 8000f54:	4608      	mov	r0, r1
 8000f56:	602b      	str	r3, [r5, #0]
 8000f58:	f7ff fb30 	bl	80005bc <_sbrk>
 8000f5c:	1c43      	adds	r3, r0, #1
 8000f5e:	d102      	bne.n	8000f66 <_sbrk_r+0x1a>
 8000f60:	682b      	ldr	r3, [r5, #0]
 8000f62:	b103      	cbz	r3, 8000f66 <_sbrk_r+0x1a>
 8000f64:	6023      	str	r3, [r4, #0]
 8000f66:	bd38      	pop	{r3, r4, r5, pc}
 8000f68:	200000b4 	.word	0x200000b4

08000f6c <__sread>:
 8000f6c:	b510      	push	{r4, lr}
 8000f6e:	460c      	mov	r4, r1
 8000f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f74:	f000 f8a0 	bl	80010b8 <_read_r>
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	bfab      	itete	ge
 8000f7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8000f80:	181b      	addge	r3, r3, r0
 8000f82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f86:	bfac      	ite	ge
 8000f88:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f8a:	81a3      	strhlt	r3, [r4, #12]
 8000f8c:	bd10      	pop	{r4, pc}

08000f8e <__swrite>:
 8000f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f92:	461f      	mov	r7, r3
 8000f94:	898b      	ldrh	r3, [r1, #12]
 8000f96:	05db      	lsls	r3, r3, #23
 8000f98:	4605      	mov	r5, r0
 8000f9a:	460c      	mov	r4, r1
 8000f9c:	4616      	mov	r6, r2
 8000f9e:	d505      	bpl.n	8000fac <__swrite+0x1e>
 8000fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f000 f868 	bl	800107c <_lseek_r>
 8000fac:	89a3      	ldrh	r3, [r4, #12]
 8000fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fb6:	81a3      	strh	r3, [r4, #12]
 8000fb8:	4632      	mov	r2, r6
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc2:	f000 b817 	b.w	8000ff4 <_write_r>

08000fc6 <__sseek>:
 8000fc6:	b510      	push	{r4, lr}
 8000fc8:	460c      	mov	r4, r1
 8000fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fce:	f000 f855 	bl	800107c <_lseek_r>
 8000fd2:	1c43      	adds	r3, r0, #1
 8000fd4:	89a3      	ldrh	r3, [r4, #12]
 8000fd6:	bf15      	itete	ne
 8000fd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8000fda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000fde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000fe2:	81a3      	strheq	r3, [r4, #12]
 8000fe4:	bf18      	it	ne
 8000fe6:	81a3      	strhne	r3, [r4, #12]
 8000fe8:	bd10      	pop	{r4, pc}

08000fea <__sclose>:
 8000fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fee:	f000 b813 	b.w	8001018 <_close_r>
	...

08000ff4 <_write_r>:
 8000ff4:	b538      	push	{r3, r4, r5, lr}
 8000ff6:	4d07      	ldr	r5, [pc, #28]	; (8001014 <_write_r+0x20>)
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	602a      	str	r2, [r5, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	f7ff fa89 	bl	800051a <_write>
 8001008:	1c43      	adds	r3, r0, #1
 800100a:	d102      	bne.n	8001012 <_write_r+0x1e>
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	b103      	cbz	r3, 8001012 <_write_r+0x1e>
 8001010:	6023      	str	r3, [r4, #0]
 8001012:	bd38      	pop	{r3, r4, r5, pc}
 8001014:	200000b4 	.word	0x200000b4

08001018 <_close_r>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	4d06      	ldr	r5, [pc, #24]	; (8001034 <_close_r+0x1c>)
 800101c:	2300      	movs	r3, #0
 800101e:	4604      	mov	r4, r0
 8001020:	4608      	mov	r0, r1
 8001022:	602b      	str	r3, [r5, #0]
 8001024:	f7ff fa95 	bl	8000552 <_close>
 8001028:	1c43      	adds	r3, r0, #1
 800102a:	d102      	bne.n	8001032 <_close_r+0x1a>
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	b103      	cbz	r3, 8001032 <_close_r+0x1a>
 8001030:	6023      	str	r3, [r4, #0]
 8001032:	bd38      	pop	{r3, r4, r5, pc}
 8001034:	200000b4 	.word	0x200000b4

08001038 <_fstat_r>:
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	4d07      	ldr	r5, [pc, #28]	; (8001058 <_fstat_r+0x20>)
 800103c:	2300      	movs	r3, #0
 800103e:	4604      	mov	r4, r0
 8001040:	4608      	mov	r0, r1
 8001042:	4611      	mov	r1, r2
 8001044:	602b      	str	r3, [r5, #0]
 8001046:	f7ff fa90 	bl	800056a <_fstat>
 800104a:	1c43      	adds	r3, r0, #1
 800104c:	d102      	bne.n	8001054 <_fstat_r+0x1c>
 800104e:	682b      	ldr	r3, [r5, #0]
 8001050:	b103      	cbz	r3, 8001054 <_fstat_r+0x1c>
 8001052:	6023      	str	r3, [r4, #0]
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop
 8001058:	200000b4 	.word	0x200000b4

0800105c <_isatty_r>:
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	4d06      	ldr	r5, [pc, #24]	; (8001078 <_isatty_r+0x1c>)
 8001060:	2300      	movs	r3, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	602b      	str	r3, [r5, #0]
 8001068:	f7ff fa8f 	bl	800058a <_isatty>
 800106c:	1c43      	adds	r3, r0, #1
 800106e:	d102      	bne.n	8001076 <_isatty_r+0x1a>
 8001070:	682b      	ldr	r3, [r5, #0]
 8001072:	b103      	cbz	r3, 8001076 <_isatty_r+0x1a>
 8001074:	6023      	str	r3, [r4, #0]
 8001076:	bd38      	pop	{r3, r4, r5, pc}
 8001078:	200000b4 	.word	0x200000b4

0800107c <_lseek_r>:
 800107c:	b538      	push	{r3, r4, r5, lr}
 800107e:	4d07      	ldr	r5, [pc, #28]	; (800109c <_lseek_r+0x20>)
 8001080:	4604      	mov	r4, r0
 8001082:	4608      	mov	r0, r1
 8001084:	4611      	mov	r1, r2
 8001086:	2200      	movs	r2, #0
 8001088:	602a      	str	r2, [r5, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	f7ff fa88 	bl	80005a0 <_lseek>
 8001090:	1c43      	adds	r3, r0, #1
 8001092:	d102      	bne.n	800109a <_lseek_r+0x1e>
 8001094:	682b      	ldr	r3, [r5, #0]
 8001096:	b103      	cbz	r3, 800109a <_lseek_r+0x1e>
 8001098:	6023      	str	r3, [r4, #0]
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	200000b4 	.word	0x200000b4

080010a0 <__malloc_lock>:
 80010a0:	4801      	ldr	r0, [pc, #4]	; (80010a8 <__malloc_lock+0x8>)
 80010a2:	f7ff be0b 	b.w	8000cbc <__retarget_lock_acquire_recursive>
 80010a6:	bf00      	nop
 80010a8:	200000a8 	.word	0x200000a8

080010ac <__malloc_unlock>:
 80010ac:	4801      	ldr	r0, [pc, #4]	; (80010b4 <__malloc_unlock+0x8>)
 80010ae:	f7ff be06 	b.w	8000cbe <__retarget_lock_release_recursive>
 80010b2:	bf00      	nop
 80010b4:	200000a8 	.word	0x200000a8

080010b8 <_read_r>:
 80010b8:	b538      	push	{r3, r4, r5, lr}
 80010ba:	4d07      	ldr	r5, [pc, #28]	; (80010d8 <_read_r+0x20>)
 80010bc:	4604      	mov	r4, r0
 80010be:	4608      	mov	r0, r1
 80010c0:	4611      	mov	r1, r2
 80010c2:	2200      	movs	r2, #0
 80010c4:	602a      	str	r2, [r5, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	f7ff fa0a 	bl	80004e0 <_read>
 80010cc:	1c43      	adds	r3, r0, #1
 80010ce:	d102      	bne.n	80010d6 <_read_r+0x1e>
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	b103      	cbz	r3, 80010d6 <_read_r+0x1e>
 80010d4:	6023      	str	r3, [r4, #0]
 80010d6:	bd38      	pop	{r3, r4, r5, pc}
 80010d8:	200000b4 	.word	0x200000b4

080010dc <_init>:
 80010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010de:	bf00      	nop
 80010e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010e2:	bc08      	pop	{r3}
 80010e4:	469e      	mov	lr, r3
 80010e6:	4770      	bx	lr

080010e8 <_fini>:
 80010e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ea:	bf00      	nop
 80010ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ee:	bc08      	pop	{r3}
 80010f0:	469e      	mov	lr, r3
 80010f2:	4770      	bx	lr
