/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

int main(void)
{
	__asm("SVC #8");
	register uint8_t svc_data __asm("r0"); // you can use this approach to get value from register and so on
// uint32_t data;
//	__asm("MOV %0,R0": "=r"(data) ::);

	printf("svc_data: %ld \n",svc_data);
    /* Loop forever */
	for(;;);
}

__attribute__ ((naked)) void SVC_Handler(void)
{
	__asm("MRS R0,MSP");
	__asm("B SVC_Handler_c");
}

void SVC_Handler_c(uint32_t *pBaseOfStackFrame){
 // here it push r7 and lr and also subtract sp by 8 this is how compiler does this lol


	__asm("MRS R1,MSP");
	__asm("ADD R1,#16");

	printf("In SVC Handler \n");
	uint8_t *pReturn_addr = (uint8_t*)pBaseOfStackFrame[6];
	pReturn_addr -= 2; // 2 previous bytes
	uint8_t svc_number = *pReturn_addr;
	printf("return addr: %d\n",svc_number);
	svc_number+=4;
	pBaseOfStackFrame[0] = svc_number & 0xFF; // when exiting everything is pop from the stack
}
