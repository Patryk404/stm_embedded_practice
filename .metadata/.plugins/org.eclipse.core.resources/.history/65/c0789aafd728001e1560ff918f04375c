/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

void enable_all_faults(void){
	uint32_t *shcrs = (uint32_t*)0xE000ED24;
	*shcrs |= (1<<18); // enabling usgfault
	*shcrs |= (1<<17); // enabling busfault
	*shcrs |= (1<<16); // enabling memfault
}
int illegal_instruction_execution(void) { // processor attempted an instruction fetch from a location that does nor permit execution in case of 0xE0000000
  int (*bad_instruction)(void) = (void *)0x60000000;
  return bad_instruction();
}

void divide_by_0(void){
	return 12/0;
}

int main(void)
{
	// enable all configurable exceptions like usage fault, mem manage fault and bus fault
	enable_all_faults();

	// implement the fault handlers
	// done below lol
	// lets force the processor to execute some undefined instruction
	illegal_instruction_execution(); // usage fault
	divide_by_0();
	// analyze the fault

    /* Loop forever */
	for(;;);
}

void HardFault_Handler(void){

}

void MemManage_Handler(void){
	uint8_t* MMSR = 0xE000ED28;
	printf("status: %x",*MMSR);
}

void BusFault_Handler(void){
}

void UsageFault_Handler(void){
	uint16_t* UFSR = (uint16_t*)0xE000ED2A;
//	printf("What are You doing in my swamp?");
}

