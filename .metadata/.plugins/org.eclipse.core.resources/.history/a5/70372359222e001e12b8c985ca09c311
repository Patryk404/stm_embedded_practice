/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#define SRAM_START 0x20000000U
#define SRAM_SIZE (64 * 1024)
#define SRAM_END ((SRAM_START)+(SRAM_SIZE))

#define STACK_SIZE_TASK 1024U // one kilobyte because one kilobyte have 1024 bytes
#define STACK_SIZE_SCHEDULER 1024U

#define STACK_TASK1_START SRAM_END
#define STACK_TASK2_START ((SRAM_END)-(STACK_SIZE * 1))
#define STACK_TASK3_START ((SRAM_END)-(STACK_SIZE * 2))
#define STACK_TASK4_START ((SRAM_END)-(STACK_SIZE * 3))
#define STACK_SCHEDULER_START ((SRAM_END)-(STACK_SIZE * 4))

#define TICK_HZ 1000U
#define PROCESSOR_CLOCK_FREQUENCY 8000000U

void init_systick_timer(uint32_t tick_hz);

void task1_handler(void);
void task2_handler(void);
void task3_handler(void);
void task4_handler(void);

int main(void)
{
    /* Loop forever */
	for(;;);
}

void task1_handler(void){
	while(1){
		printf("Task1 \n");
	}
}

void task2_handler(void){
	while(1){
		pritnf("Task2 \n");
	}
}

void task3_handler(void){
	while(1){
		printf("Task3 \n");
	}
}

void task4_handler(void){
	while(1){
		printf("Task4 \n");
	}
}

void init_systick_timer(uint32_t tick_hz){
	uint32_t reload_value = PROCESSOR_CLOCK_FREQUENCY/tick_hz;

	uint32_t* pSRVR = (uint32_t*)0xE000E014;
	uint32_t* pSCSR = (uint32_t*)0xE000E010;

}
