/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

int main(void)
{
    /* Loop forever */
	__asm("MOV R0,#10");
	__asm("MOV R1,#20");
	__asm("SVC #36");
	register uint32_t svc_data __asm("r0");
	printf("Addition: %ld \n",svc_data);
	__asm("MOV R0,#30");
	__asm("MOV R1,#20");
	__asm("SVC #37");
	__asm("mov %0,R0": "=r"(svc_data)::);
	printf("Subtraction: %ld \n",svc_data);
	__asm("MOV R0,#12");
	__asm("MOV R1,#12");
	__asm("SVC #38");
	__asm("mov %0,R0":"=r"(svc_data)::);
	printf("Multiplication: %ld \n",svc_data);
	__asm("MOV R0, #24");
	__asm("MOV R1, #12");
	__asm("SVC #38");
	__asm("mov %0,R0": "=r"(svc_data)::);

//	register uint32_t svc_data __asm("r0")
	printf("Subtraction: %ld \n",svc_data);
	for(;;);
}

__attribute__((naked)) void SVC_Handler(void){
	__asm("MRS R0,MSP");
	__asm("B SVC_Handler_c");
}

void SVC_Handler_c(uint32_t* pBaseOfStackFrame){
	uint32_t arg1 = pBaseOfStackFrame[0];
	uint32_t arg2 = pBaseOfStackFrame[1];
	uint8_t* pReturn_addr = (uint8_t*)pBaseOfStackFrame[6];
	pReturn_addr -=2;
	uint8_t svc_number = *pReturn_addr;
	switch(svc_number){
		case 36:{ // Addition
			pBaseOfStackFrame[0] = arg1+arg2;
			break;
		}
		case 37:{ // Subtraction
			pBaseOfStackFrame[0] = arg1-arg2;
			break;
		}
		case 38:{ // Multiplication
			pBaseOfStackFrame[0] = arg1*arg2;
			break;
		}
		case 39: { // Division
			pBaseOfStackFrame[0]= arg1/arg2;
			break;
		}
	}
	return;
}
